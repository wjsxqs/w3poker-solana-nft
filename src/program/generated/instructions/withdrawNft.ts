/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category WithdrawNft
 * @category generated
 */
export const withdrawNftStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'WithdrawNftInstructionArgs'
)
/**
 * Accounts required by the _withdrawNft_ instruction
 *
 * @property [_writable_] settings
 * @property [_writable_] gameVaultPda
 * @property [_writable_] gameVaultTokenAccount
 * @property [**signer**] operatorAuthority
 * @property [_writable_] toTokenAccount
 * @category Instructions
 * @category WithdrawNft
 * @category generated
 */
export type WithdrawNftInstructionAccounts = {
  settings: web3.PublicKey
  gameVaultPda: web3.PublicKey
  gameVaultTokenAccount: web3.PublicKey
  operatorAuthority: web3.PublicKey
  toTokenAccount: web3.PublicKey
  rent?: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const withdrawNftInstructionDiscriminator = [
  142, 181, 191, 149, 82, 175, 216, 100,
]

/**
 * Creates a _WithdrawNft_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category WithdrawNft
 * @category generated
 */
export function createWithdrawNftInstruction(
  accounts: WithdrawNftInstructionAccounts,
  programId = new web3.PublicKey('EqZ2b3VrYYH426eJ5MnAHs5QGuHXmpTzTHCPsoX9ETMf')
) {
  const [data] = withdrawNftStruct.serialize({
    instructionDiscriminator: withdrawNftInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.settings,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.gameVaultPda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.gameVaultTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.operatorAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.toTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
