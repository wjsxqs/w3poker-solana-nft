/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * Unauthorized: 'You are not authorized to perform this action.'
 *
 * @category Errors
 * @category generated
 */
export class UnauthorizedError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'Unauthorized'
  constructor() {
    super('You are not authorized to perform this action.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnauthorizedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new UnauthorizedError())
createErrorFromNameLookup.set('Unauthorized', () => new UnauthorizedError())

/**
 * Uninitialized: 'Account is not initialized'
 *
 * @category Errors
 * @category generated
 */
export class UninitializedError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'Uninitialized'
  constructor() {
    super('Account is not initialized')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UninitializedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new UninitializedError())
createErrorFromNameLookup.set('Uninitialized', () => new UninitializedError())

/**
 * InvalidCollectionAuthority: 'Invalid collection authority.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidCollectionAuthorityError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'InvalidCollectionAuthority'
  constructor() {
    super('Invalid collection authority.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidCollectionAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1772,
  () => new InvalidCollectionAuthorityError()
)
createErrorFromNameLookup.set(
  'InvalidCollectionAuthority',
  () => new InvalidCollectionAuthorityError()
)

/**
 * InvalidCollectionMint: 'Invalid collection mint.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidCollectionMintError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'InvalidCollectionMint'
  constructor() {
    super('Invalid collection mint.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidCollectionMintError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new InvalidCollectionMintError())
createErrorFromNameLookup.set(
  'InvalidCollectionMint',
  () => new InvalidCollectionMintError()
)

/**
 * InvalidTokenId: 'Invalid token id.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTokenIdError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'InvalidTokenId'
  constructor() {
    super('Invalid token id.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTokenIdError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new InvalidTokenIdError())
createErrorFromNameLookup.set('InvalidTokenId', () => new InvalidTokenIdError())

/**
 * IncorrectFeesReceiver: 'Incorrect fees receiver.'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectFeesReceiverError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'IncorrectFeesReceiver'
  constructor() {
    super('Incorrect fees receiver.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectFeesReceiverError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new IncorrectFeesReceiverError())
createErrorFromNameLookup.set(
  'IncorrectFeesReceiver',
  () => new IncorrectFeesReceiverError()
)

/**
 * CollectionKeyMismatch: 'Collection key mismatch.'
 *
 * @category Errors
 * @category generated
 */
export class CollectionKeyMismatchError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'CollectionKeyMismatch'
  constructor() {
    super('Collection key mismatch.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CollectionKeyMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new CollectionKeyMismatchError())
createErrorFromNameLookup.set(
  'CollectionKeyMismatch',
  () => new CollectionKeyMismatchError()
)

/**
 * IncorrectCollectionOwner: 'Incorrect collection owner.'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectCollectionOwnerError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'IncorrectCollectionOwner'
  constructor() {
    super('Incorrect collection owner.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectCollectionOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new IncorrectCollectionOwnerError())
createErrorFromNameLookup.set(
  'IncorrectCollectionOwner',
  () => new IncorrectCollectionOwnerError()
)

/**
 * IncorrectCollectionAuthority: 'Incorrect collection authority.'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectCollectionAuthorityError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'IncorrectCollectionAuthority'
  constructor() {
    super('Incorrect collection authority.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectCollectionAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1778,
  () => new IncorrectCollectionAuthorityError()
)
createErrorFromNameLookup.set(
  'IncorrectCollectionAuthority',
  () => new IncorrectCollectionAuthorityError()
)

/**
 * IncorrectCollectionMint: 'Incorrect collection mint.'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectCollectionMintError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'IncorrectCollectionMint'
  constructor() {
    super('Incorrect collection mint.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectCollectionMintError)
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new IncorrectCollectionMintError())
createErrorFromNameLookup.set(
  'IncorrectCollectionMint',
  () => new IncorrectCollectionMintError()
)

/**
 * IncorrectCollection: 'Incorrect collection.'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectCollectionError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'IncorrectCollection'
  constructor() {
    super('Incorrect collection.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectCollectionError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new IncorrectCollectionError())
createErrorFromNameLookup.set(
  'IncorrectCollection',
  () => new IncorrectCollectionError()
)

/**
 * MintMismatch: 'Mint mismatch.'
 *
 * @category Errors
 * @category generated
 */
export class MintMismatchError extends Error {
  readonly code: number = 0x177b
  readonly name: string = 'MintMismatch'
  constructor() {
    super('Mint mismatch.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MintMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(0x177b, () => new MintMismatchError())
createErrorFromNameLookup.set('MintMismatch', () => new MintMismatchError())

/**
 * InvalidPayId: 'Invalid pay id.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPayIdError extends Error {
  readonly code: number = 0x177c
  readonly name: string = 'InvalidPayId'
  constructor() {
    super('Invalid pay id.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidPayIdError)
    }
  }
}

createErrorFromCodeLookup.set(0x177c, () => new InvalidPayIdError())
createErrorFromNameLookup.set('InvalidPayId', () => new InvalidPayIdError())

/**
 * PayNotEnabled: 'Pay not enabled.'
 *
 * @category Errors
 * @category generated
 */
export class PayNotEnabledError extends Error {
  readonly code: number = 0x177d
  readonly name: string = 'PayNotEnabled'
  constructor() {
    super('Pay not enabled.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PayNotEnabledError)
    }
  }
}

createErrorFromCodeLookup.set(0x177d, () => new PayNotEnabledError())
createErrorFromNameLookup.set('PayNotEnabled', () => new PayNotEnabledError())

/**
 * IncorrectBuyerAssociatedTokenAccount: 'Invalid buyer associated token account.'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectBuyerAssociatedTokenAccountError extends Error {
  readonly code: number = 0x177e
  readonly name: string = 'IncorrectBuyerAssociatedTokenAccount'
  constructor() {
    super('Invalid buyer associated token account.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectBuyerAssociatedTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177e,
  () => new IncorrectBuyerAssociatedTokenAccountError()
)
createErrorFromNameLookup.set(
  'IncorrectBuyerAssociatedTokenAccount',
  () => new IncorrectBuyerAssociatedTokenAccountError()
)

/**
 * IncorrectPaymentVaultTokenAccount: 'Invalid vault associated token account.'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectPaymentVaultTokenAccountError extends Error {
  readonly code: number = 0x177f
  readonly name: string = 'IncorrectPaymentVaultTokenAccount'
  constructor() {
    super('Invalid vault associated token account.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectPaymentVaultTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177f,
  () => new IncorrectPaymentVaultTokenAccountError()
)
createErrorFromNameLookup.set(
  'IncorrectPaymentVaultTokenAccount',
  () => new IncorrectPaymentVaultTokenAccountError()
)

/**
 * IncorrectGameVaultTokenAccount: 'Invalid game vault token account.'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectGameVaultTokenAccountError extends Error {
  readonly code: number = 0x1780
  readonly name: string = 'IncorrectGameVaultTokenAccount'
  constructor() {
    super('Invalid game vault token account.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectGameVaultTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1780,
  () => new IncorrectGameVaultTokenAccountError()
)
createErrorFromNameLookup.set(
  'IncorrectGameVaultTokenAccount',
  () => new IncorrectGameVaultTokenAccountError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
